// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using BrainMoodML.ConsoleApp.Data;
using BrainMoodML.Model;

namespace BrainMoodML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = "TODO";

        static void Main(string[] args)
        {
            var data = Read("TODO");

            var output = data
                .Select(frame => (int) Predict(frame.Brainwaves).Prediction)
                .ToList();

            var anger = output.Where(o => o == 0).Count() / (double) output.Count;
            var depression = output.Where(o => o == 1).Count() / (double)output.Count;
            var happiness = output.Where(o => o == 2).Count() / (double)output.Count;
            var relax = output.Where(o => o == 3).Count() / (double)output.Count;


            // Create single instance of sample data from first line of dataset for model input
            //ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            //// Make a single prediction on the sample data and print results
            //var predictionResult = ConsumeModel.Predict(sampleData);

            //Console.WriteLine("Using model to make single prediction -- Comparing actual Emotion with predicted Emotion from sample data...\n\n");
            //Console.WriteLine($"alphaHigh: {sampleData.AlphaHigh}");
            //Console.WriteLine($"alphaLow: {sampleData.AlphaLow}");
            //Console.WriteLine($"betaHigh: {sampleData.BetaHigh}");
            //Console.WriteLine($"betaLow: {sampleData.BetaLow}");
            //Console.WriteLine($"delta: {sampleData.Delta}");
            //Console.WriteLine($"gammaHigh: {sampleData.GammaHigh}");
            //Console.WriteLine($"gammaLow: {sampleData.GammaLow}");
            //Console.WriteLine($"theta: {sampleData.Theta}");
            //Console.WriteLine($"\n\nActual Emotion: {sampleData.Emotion} \nPredicted Emotion value {predictionResult.Prediction} \nPredicted Emotion scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            //Console.WriteLine("=============== End of process, hit any key to finish ===============");
            //Console.ReadKey();
        }

        private static ModelOutput Predict(BrainwaveReadings data)
        {
            var modelInput = new ModelInput
            {
                AlphaHigh = (float) data.AlphaHigh,
                AlphaLow = (float)data.AlphaLow,
                BetaHigh = (float)data.BetaHigh,
                BetaLow = (float)data.BetaLow,
                Delta = (float)data.Delta,
                GammaHigh = (float)data.GammaHigh,
                GammaLow = (float)data.GammaLow,
                Theta = (float)data.Theta
            };

            return ConsumeModel.Predict(modelInput);
        }

        private static List<EegData> Read(string filePath)
        {
            var lines = File.ReadAllLines(filePath).Skip(1).ToList();

            return lines
                .Select(Deserialize)
                .ToList();
        }

        private static EegData Deserialize(string csvLine)
        {
            var values = csvLine.Split(',');

            var alphaHigh = double.Parse(values[0]);
            var alphaLow = double.Parse(values[1]);
            var betaHigh = double.Parse(values[2]);
            var betaLow = double.Parse(values[3]);
            var delta = double.Parse(values[4]);
            var gammaHigh = double.Parse(values[5]);
            var gammaLow = double.Parse(values[6]);
            var theta = double.Parse(values[7]);

            var attention = int.Parse(values[8]);
            var meditation = int.Parse(values[9]);

            var brainwaveReadings = new BrainwaveReadings(
                alphaHigh,
                alphaLow,
                betaHigh,
                betaLow,
                delta,
                gammaHigh,
                gammaLow,
                theta);

            var eSenseReadings = new ESenseReadings(attention, meditation);

            return new EegData(brainwaveReadings, eSenseReadings);
        }

    }
}
